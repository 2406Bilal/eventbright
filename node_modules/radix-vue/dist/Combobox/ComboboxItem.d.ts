import type { Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
export type SelectEvent = CustomEvent<{
    originalEvent: PointerEvent;
    value?: string | object;
}>;
interface ComboboxItemContext {
    isSelected: Ref<boolean>;
}
export declare const injectComboboxItemContext: <T extends ComboboxItemContext | null | undefined = ComboboxItemContext>(fallback?: T | undefined) => T extends null ? ComboboxItemContext | null : ComboboxItemContext, provideComboboxItemContext: (contextValue: ComboboxItemContext) => void;
export type ComboboxItemEmits = {
    select: [event: SelectEvent];
};
export interface ComboboxItemProps extends PrimitiveProps {
    value: string | object;
    disabled?: boolean;
    textValue?: string;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    value: {
        type: import("vue").PropType<string | object>;
        required: true;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    select: (event: SelectEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<string | object>;
        required: true;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
}>> & {
    onSelect?: ((event: SelectEvent) => any) | undefined;
}, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
