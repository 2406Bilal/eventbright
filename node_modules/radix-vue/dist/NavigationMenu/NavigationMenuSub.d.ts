import type { Orientation } from './utils';
import type { PrimitiveProps } from '../Primitive';
export type NavigationMenuSubEmits = {
    'update:modelValue': [value: string];
};
export interface NavigationMenuSubProps extends PrimitiveProps {
    modelValue?: string;
    defaultValue?: string;
    orientation?: Orientation;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<Orientation>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<Orientation>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
}, {
    orientation: Orientation;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
