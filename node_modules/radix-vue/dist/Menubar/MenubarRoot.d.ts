import type { Ref } from 'vue';
import type { Direction } from '../shared/types';
export interface MenubarRootProps {
    modelValue?: string;
    defaultValue?: string;
    dir?: Direction;
    loop?: boolean;
}
export type MenubarRootEmits = {
    'update:modelValue': [value: boolean];
};
export interface MenubarRootContext {
    modelValue: Ref<string>;
    dir: Ref<Direction>;
    loop: Ref<boolean>;
    onMenuOpen(value: string): void;
    onMenuClose(): void;
    onMenuToggle(value: string): void;
}
export declare const injectMenubarRootContext: <T extends MenubarRootContext | null | undefined = MenubarRootContext>(fallback?: T | undefined) => T extends null ? MenubarRootContext | null : MenubarRootContext, provideMenubarRootContext: (contextValue: MenubarRootContext) => void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
}, {
    loop: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
