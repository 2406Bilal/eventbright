import type { Ref } from 'vue';
import type { MenuContext } from "./MenuRoot";
export interface MenuSubContext {
    contentId: string;
    triggerId: string;
    trigger: Ref<HTMLElement | undefined>;
    onTriggerChange(trigger: HTMLElement | undefined): void;
    parentMenuContext?: MenuContext;
}
export declare const injectMenuSubContext: <T extends MenuSubContext | null | undefined = MenuSubContext>(fallback?: T | undefined) => T extends null ? MenuSubContext | null : MenuSubContext, provideMenuSubContext: (contextValue: MenuSubContext) => void;
export interface MenuSubProps {
    open?: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:open": (payload: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
}>> & {
    "onUpdate:open"?: ((payload: boolean) => any) | undefined;
}, {
    open: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
