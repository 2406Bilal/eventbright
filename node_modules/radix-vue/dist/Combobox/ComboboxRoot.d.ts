import type { ComponentInternalInstance, ComputedRef, Ref } from 'vue';
import type { Direction } from '../shared/types';
import type { PrimitiveProps } from '../Primitive';
type ComboboxRootContext = {
    modelValue: Ref<string | Array<string> | object | Array<object>>;
    onValueChange: (val: string | object) => void;
    searchTerm: Ref<string>;
    multiple: Ref<boolean>;
    disabled: Ref<boolean>;
    open: Ref<boolean>;
    onOpenChange: (value: boolean) => void;
    isUserInputted: Ref<boolean>;
    options: ComputedRef<Array<string | object>>;
    optionsInstance: Ref<Set<ComponentInternalInstance>>;
    filteredOptions: Ref<Array<string | object>>;
    contentId: string;
    contentElement: Ref<HTMLElement | undefined>;
    onContentElementChange: (el: HTMLElement) => void;
    inputElement: Ref<HTMLInputElement | undefined>;
    onInputElementChange: (el: HTMLInputElement) => void;
    onInputNavigation: (dir: 'up' | 'down' | 'home' | 'end') => void;
    onInputEnter: () => void;
    selectedValue: Ref<string | object | undefined>;
    onSelectedValueChange: (val: string | object) => void;
    parentElement: Ref<HTMLElement | undefined>;
};
export declare const injectComboboxRootContext: <T extends ComboboxRootContext | null | undefined = ComboboxRootContext>(fallback?: T | undefined) => T extends null ? ComboboxRootContext | null : ComboboxRootContext, provideComboboxRootContext: (contextValue: ComboboxRootContext) => void;
export type ComboboxRootEmits = {
    'update:modelValue': [value: string | Array<string> | object | Array<object>];
    'update:open': [value: boolean];
    'update:searchTerm': [value: string];
};
export interface ComboboxRootProps extends PrimitiveProps {
    modelValue?: string | string[] | object | object[];
    defaultValue?: string | string[] | object | object[];
    open?: boolean;
    defaultOpen?: boolean;
    searchTerm?: string;
    multiple?: boolean;
    disabled?: boolean;
    name?: string;
    dir?: Direction;
    filterFunction?: (val: Array<string | any>, term: string) => Array<any>;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    multiple: {
        type: import("vue").PropType<boolean>;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultOpen: {
        type: import("vue").PropType<boolean>;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<string | object | string[] | object[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | object | string[] | object[]>;
    };
    searchTerm: {
        type: import("vue").PropType<string>;
    };
    filterFunction: {
        type: import("vue").PropType<(val: any[], term: string) => any[]>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:open": (value: boolean) => void;
    "update:modelValue": (value: string | object | string[] | object[]) => void;
    "update:searchTerm": (value: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    multiple: {
        type: import("vue").PropType<boolean>;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultOpen: {
        type: import("vue").PropType<boolean>;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    defaultValue: {
        type: import("vue").PropType<string | object | string[] | object[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | object | string[] | object[]>;
    };
    searchTerm: {
        type: import("vue").PropType<string>;
    };
    filterFunction: {
        type: import("vue").PropType<(val: any[], term: string) => any[]>;
    };
}>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | object | string[] | object[]) => any) | undefined;
    "onUpdate:searchTerm"?: ((value: string) => any) | undefined;
}, {
    open: boolean;
}, {}>, {
    default?(_: {
        activeIndex: number;
        open: boolean;
        disabled: boolean;
        value: (string | object | string[] | object[] | undefined) & (string | object | string[] | object[]);
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
