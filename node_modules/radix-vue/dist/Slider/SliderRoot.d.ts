import type { Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
import type { DataOrientation, Direction } from '../shared/types';
export interface SliderRootProps extends PrimitiveProps {
    name?: string;
    defaultValue?: number[];
    modelValue?: number[];
    disabled?: boolean;
    orientation?: DataOrientation;
    dir?: Direction;
    inverted?: boolean;
    min?: number;
    max?: number;
    step?: number;
    minStepsBetweenThumbs?: number;
}
export type SliderRootEmits = {
    'update:modelValue': [payload: number[] | undefined];
    'valueCommit': [payload: number[]];
};
export interface SliderRootContext {
    orientation: Ref<DataOrientation>;
    disabled: Ref<boolean>;
    min: Ref<number>;
    max: Ref<number>;
    modelValue?: Readonly<Ref<number[] | undefined>>;
    valueIndexToChangeRef: Ref<number>;
    thumbElements: Ref<HTMLElement[]>;
}
export declare const injectSliderRootContext: <T extends SliderRootContext | null | undefined = SliderRootContext>(fallback?: T | undefined) => T extends null ? SliderRootContext | null : SliderRootContext, provideSliderRootContext: (contextValue: SliderRootContext) => void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    max: {
        type: import("vue").PropType<number>;
        default: number;
    };
    min: {
        type: import("vue").PropType<number>;
        default: number;
    };
    modelValue: {
        type: import("vue").PropType<number[]>;
    };
    inverted: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    step: {
        type: import("vue").PropType<number>;
        default: number;
    };
    minStepsBetweenThumbs: {
        type: import("vue").PropType<number>;
        default: number;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (payload: number[] | undefined) => void;
    valueCommit: (payload: number[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    max: {
        type: import("vue").PropType<number>;
        default: number;
    };
    min: {
        type: import("vue").PropType<number>;
        default: number;
    };
    modelValue: {
        type: import("vue").PropType<number[]>;
    };
    inverted: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    step: {
        type: import("vue").PropType<number>;
        default: number;
    };
    minStepsBetweenThumbs: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: number[] | undefined) => any) | undefined;
    onValueCommit?: ((payload: number[]) => any) | undefined;
}, {
    disabled: boolean;
    defaultValue: number[];
    orientation: DataOrientation;
    max: number;
    min: number;
    inverted: boolean;
    step: number;
    minStepsBetweenThumbs: number;
}, {}>, {
    default?(_: {
        modelValue: number[];
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
