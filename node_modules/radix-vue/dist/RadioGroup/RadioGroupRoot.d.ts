import type { Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
import type { DataOrientation, Direction } from '../shared/types';
export interface RadioGroupRootProps extends PrimitiveProps {
    modelValue?: string;
    defaultValue?: string;
    disabled?: boolean;
    name?: string;
    required?: boolean;
    orientation?: DataOrientation;
    dir?: Direction;
    loop?: boolean;
}
export type RadioGroupRootEmits = {
    'update:modelValue': [payload: string];
};
interface RadioGroupRootContext {
    modelValue?: Readonly<Ref<string | undefined>>;
    changeModelValue: (value?: string) => void;
    disabled: Ref<boolean>;
    loop: Ref<boolean>;
    orientation: Ref<DataOrientation | undefined>;
    name?: string;
    required: Ref<boolean>;
}
export declare const injectRadioGroupRootContext: <T extends RadioGroupRootContext | null | undefined = RadioGroupRootContext>(fallback?: T | undefined) => T extends null ? RadioGroupRootContext | null : RadioGroupRootContext, provideRadioGroupRootContext: (contextValue: RadioGroupRootContext) => void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: undefined;
    };
    required: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (payload: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag | import("vue").Component>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: undefined;
    };
    required: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: string) => any) | undefined;
}, {
    disabled: boolean;
    loop: boolean;
    orientation: DataOrientation;
    required: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
